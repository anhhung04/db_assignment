services:
  proxy:
    build: ./frontend
    ports:
      - "3000:80"
    restart: always
    depends_on:
      - api
  api:
    build: ./backend
    restart: unless-stopped
    depends_on:
      - database
      - redis
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_HOST: database
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 3000
  redis:
    image: redis:alpine3.19
    restart: unless-stopped
    sysctls:
      net.core.somaxconn: 1024
  database:
    image: postgres:13-alpine3.19
    restart: unless-stopped
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    security_opt:
      - no-new-privileges:true
    volumes:
      - /tmp/postgres_data:/var/lib/postgresql/data
  cloudflare_tunnel:
      image: cloudflare/cloudflared:latest
      command: tunnel --no-autoupdate run --token ${CF_TOKEN}
      restart: always
      environment:
        - CF_TOKEN
      depends_on:
        - proxy