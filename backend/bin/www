const { app, redisClient } = require("../src/server");
const { pool } = require('../src/repository');
const logger = require('../src/utils/log');
const process = require('process');
require('dotenv').config();

const port = normalizePort(process.env.PORT || '3000');

let server;

// if (process.env.NODE_ENV === 'production') {
// const https = require('https');
// server = https.createServer({
//     key: fs.readFileSync(__dirname + '/../certs/key.pem'),
//     cert: fs.readFileSync(__dirname + '/../certs/cert.pem'),
// }, app);
// }
const http = require('http');
server = http.createServer(app);

process.on('SIGTERM', shutDown);
process.on('SIGINT', shutDown);

(async function () {
    try {
        console.log('[+] Connecting to Redis...');
        await redisClient.connect();
        console.log('[+] Checking Postgres connection...');
        try {
            await require('../src/repository/index').getConn();
        } catch (err) {
            logger.error(err);
            process.exit(1);
        }
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    } catch (err) {
        console.log(err);
        process.exit(1);
    }
})();

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('[+] Listening on ' + bind);
}

function shutDown() {
    console.log('Received kill signal, shutting down gracefully');
    server.close(() => {
        console.log('Closed out remaining connections');
        process.exit(0);
    });

    pool.end().then(() => {
        console.log('Closed out remaining connections');
        process.exit(0);
    });

    redisClient.quit().then(() => {
        console.log('Closed out remaining connections');
        process.exit(0);
    });

    setTimeout(() => {
        console.error('Could not close connections in time, forcefully shutting down');
        process.exit(1);
    }, 10000);
}